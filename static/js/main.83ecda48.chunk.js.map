{"version":3,"sources":["Components/AboutApp.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","index.js"],"names":["AboutApp","useState","color","backgroundColor","border","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","props","mode","to","title","aria-label","aria-current","about","changeMode","htmlFor","TextForm","text","setText","heading","rows","value","onChange","event","target","toUpperCase","displayAlert","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","newString","replace","trim","split","length","Alert","alert","typeOfAlert","role","word","lower","charAt","slice","capitalized","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.83ecda48.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function AboutApp() {\r\n    const [myStyle , setMyStyle] = useState({\r\n        color : '#3b3b3b',\r\n        backgroundColor : 'white',\r\n        border : '3px solid white'\r\n    });\r\n\r\n    const [btnText , setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    const toggleStyle=()=>{\r\n        if(myStyle.backgroundColor == 'white'){\r\n            setMyStyle({\r\n                color : 'white',\r\n                backgroundColor : '#3b3b3b',\r\n                border : '3px solid #3b3b3b'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color : 'black',\r\n                backgroundColor : 'white',\r\n                border : '3px solid white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n   \r\n    return (\r\n       <>\r\n       <br/>\r\n       <br/>\r\n        <div className=\"container mx-1 my-9\" style = {myStyle}>\r\n            <h1>About Application</h1>\r\n            <div className=\"accordion my-2 mx-1\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style = {myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style = {myStyle}>\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style = {myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style = {myStyle}>\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style = {myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style = {myStyle}>\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container mx-2\">\r\n                <button type=\"button\" className=\"btn btn-dark mx-2\" onClick={toggleStyle}>{btnText}</button>    \r\n            </div>\r\n            \r\n        </div>\r\n       </> \r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        \r\n                        <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                        \r\n                        \r\n                    </ul>\r\n                    \r\n                    <div className={`form-check form-switch text-${props.mode==='light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitch\" onClick={props.changeMode}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitch\">{props.mode==='light' ? 'Enable Dark-mode' : 'Disable Dark-mode'}</label>\r\n                    </div>\r\n                 \r\n                 </div>\r\n            </div>\r\n        </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n  }\r\n  ","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text,setText] = useState(\" \");\r\n\r\n    const textInput=(event)=>{\r\n        // this is how we handle onChange event\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const toUpper=()=>{\r\n        // .toUpperCase() is a default function given in JS\r\n        // we set the text to it's upper case\r\n        setText(text.toUpperCase());\r\n        // alert\r\n        props.displayAlert(\"Text converted to upper case\", \"success\");\r\n    }\r\n\r\n    const toLower=()=>{\r\n        // .toLowerCase() is a default function given in JS\r\n        setText(text.toLowerCase());\r\n        // alert\r\n        props.displayAlert(\"Text converted to lower case\", \"success\");\r\n    }\r\n\r\n    const toClear=()=>{\r\n        setText(\" \");        \r\n        // alert\r\n        props.displayAlert(\"Text Removed\", \"warning\");\r\n    }\r\n\r\n    const copyText=()=>{\r\n        let copyText = document.getElementById(\"myBox\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        // alert\r\n        props.displayAlert(\"Text copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const removeExtraSpace=()=>{\r\n        const newString = text.replace(/\\s+/g,' ').trim();\r\n        setText(newString);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <br></br>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"7\" value={text} onChange={textInput} style={{backgroundColor:props.mode==='dark' ? '#3b3b3b' : 'white', color:props.mode==='dark' ? 'white' : 'black'}}></textarea>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-secondary mx-1\" onClick={toUpper}>Change to Upper Case</button>\r\n                <button type=\"button\" className=\"btn btn-secondary mx-1\"  onClick={toLower}>Change to Lower Case</button>\r\n                <button type=\"button\" className=\"btn btn-secondary mx-1\"  onClick={copyText}>Copy Text</button>\r\n                <button type=\"button\" className=\"btn btn-secondary mx-1\"  onClick={removeExtraSpace}>Remove Extra Spaces</button>\r\n                <button type=\"button\" className=\"btn btn-danger mx-1\"  onClick={toClear}>Clear text area</button>\r\n            </div>\r\n            <div className=\"container\">\r\n                <br></br>\r\n                <h2>Text Summary</h2> \r\n                <h4>You typed {text.split(\" \").length - 2} Words and {text.length-1} characters!</h4>\r\n                <br></br>\r\n                <h4>Text Preview</h4>\r\n                <h6>{text}</h6>\r\n            </div>\r\n        </>\r\n\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalized = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert &&  <div>\r\n            <div className={`alert alert-${props.alert.typeOfAlert} d-flex align-items-center`} role=\"alert\">\r\n                <div>\r\n                   <strong>{capitalized(props.alert.typeOfAlert)} : </strong> {props.alert.msg}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react'; \r\nimport AboutApp from './Components/AboutApp';\r\nimport Navbar from './Components/Navbar';\r\nimport TextForm from './Components/TextForm';\r\nimport Alert from './Components/Alert';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n  \r\nfunction App(){\r\n    \r\n    // State for Light and Dark mode\r\n    const [mode , setMode] = useState('light');\r\n    // changing the states of mode i.e. from light to dark and vice versa.\r\n    const changeMode = () =>{\r\n        if(mode === 'light'){\r\n            setMode('dark');\r\n            document.body.style.backgroundColor = '#171717';\r\n            document.body.style.color = 'white';\r\n            // for displaying alert message\r\n            displayAlert(\"Dark Mode has been enabled\", \"success\");\r\n            // changing title for dark mode\r\n            document.title = \"TextUtillApp - Dark Mode\";\r\n\r\n        }else{\r\n            setMode('light');\r\n            document.body.style.backgroundColor = 'white';\r\n            document.body.style.color = 'black';\r\n            // for displaying alert message\r\n            displayAlert(\"Light Mode has been enabled\", \"success\");\r\n            // changing title for light mode\r\n            document.title = \"TextUtillApp - Light Mode\";\r\n        }\r\n    } \r\n\r\n    // States of different alert messages\r\n    // where we handle different alert messages\r\n    const [alert , setAlert] = useState(null);\r\n    \r\n    const displayAlert = (message, typeOfAlert) =>{\r\n        setAlert({\r\n            msg: message,\r\n            typeOfAlert: typeOfAlert\r\n        })\r\n\r\n        setTimeout(() =>{\r\n            setAlert(null);\r\n        }, 1000);\r\n    } \r\n    \r\n\r\n return(\r\n    <>\r\n    <Router>\r\n      <Navbar title=\"TextUtillApp\" about=\"About App\" mode={mode} changeMode={changeMode} />\r\n      <Alert alert={alert}/>\r\n      <div className=\"container\">\r\n      <Switch>\r\n          <Route exact path=\"/about\">\r\n            <AboutApp/>\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n              <TextForm heading=\"Enter you text that has to be analyzed!!\" mode={mode} displayAlert = {displayAlert}/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    </>\r\n );\r\n \r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n "],"sourceRoot":""}